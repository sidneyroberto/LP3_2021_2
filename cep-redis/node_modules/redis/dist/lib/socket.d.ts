/// <reference types="node" />
import EventEmitter from 'events';
import tls from 'tls';
export interface RedisSocketCommonOptions {
    username?: string;
    password?: string;
    connectTimeout?: number;
    noDelay?: boolean;
    keepAlive?: number | false;
    reconnectStrategy?(retries: number): number | Error;
}
export interface RedisNetSocketOptions extends RedisSocketCommonOptions {
    port?: number;
    host?: string;
}
export interface RedisUrlSocketOptions extends RedisSocketCommonOptions {
    url: string;
}
export interface RedisUnixSocketOptions extends RedisSocketCommonOptions {
    path: string;
}
export interface RedisTlsSocketOptions extends RedisNetSocketOptions, tls.SecureContextOptions {
    tls: true;
}
export declare type RedisSocketOptions = RedisNetSocketOptions | RedisUrlSocketOptions | RedisUnixSocketOptions | RedisTlsSocketOptions;
export declare type RedisSocketInitiator = () => Promise<void>;
export default class RedisSocket extends EventEmitter {
    #private;
    get isOpen(): boolean;
    get chunkRecommendedSize(): number;
    constructor(initiator?: RedisSocketInitiator, options?: RedisSocketOptions);
    connect(): Promise<void>;
    write(encodedCommands: string): boolean;
    disconnect(ignoreIsOpen?: boolean): Promise<void>;
    quit(fn: () => Promise<unknown>): Promise<void>;
}
