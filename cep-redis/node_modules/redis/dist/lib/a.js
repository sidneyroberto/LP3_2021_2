"use strict";
// type TransformReply<T> = (reply: unknown) => T;
// interface Command<T = unknown> {
//     transformReply?: TransformReply<T>;
// }
// function execCommand<C extends Command<any>>(command: C, reply: unknown): C extends Command<infer X> ? X : never {
//     if (command.transformReply) {
//         return command.transformReply(reply);
//     }
//     return reply as X;
// }
// const command: Command<number> = {
//     // transformReply() {
//     //     return 1;
//     // }
// }
// execCommand(command, 'aser')
